// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProfileMatch.Data;

#nullable disable

namespace ProfileMatch.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220113165242_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8c916fc5-5d08-4164-8594-7ac0e2b6e16a",
                            ConcurrencyStamp = "83256a0f-8959-4eb8-a15e-e9c74c782841",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "af138749-2fc8-4bcf-8492-fadb9e0d5415",
                            ConcurrencyStamp = "6d68df77-faee-4dab-bb84-4c445d4cc7a1",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a96d7c75-47f4-409b-a4d1-03f93c105647",
                            RoleId = "8c916fc5-5d08-4164-8594-7ac0e2b6e16a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClosedQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionPl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClosedQuestionId");

                    b.ToTable("AnswerOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClosedQuestionId = 1,
                            Description = "You have no idea about this language",
                            DescriptionPl = "Nie znasz podstaw tego języka programowania",
                            Level = 1
                        },
                        new
                        {
                            Id = 2,
                            ClosedQuestionId = 1,
                            Description = "You know the basic concepts of C# programming",
                            DescriptionPl = "Znasz podstawowe pojęcia związane z programowaniem w C#",
                            Level = 2
                        },
                        new
                        {
                            Id = 3,
                            ClosedQuestionId = 1,
                            Description = "You can write simple C# codes",
                            DescriptionPl = "Potrafisz pisać proste kody w języku",
                            Level = 3
                        },
                        new
                        {
                            Id = 4,
                            ClosedQuestionId = 1,
                            Description = "You can write code that is more advanced (you know what are conditions, loops, objects, functions)",
                            DescriptionPl = "Potrafisz pisać kod, który jest bardziej zaawansowany (wiesz na czym polegają warunki, pętle, obiekty, funkcje)",
                            Level = 4
                        },
                        new
                        {
                            Id = 5,
                            ClosedQuestionId = 1,
                            Description = "You can easily analyze the code, edit it, introduce new changes or write the program from scratch",
                            DescriptionPl = "Bez problemu analizujesz kod, edytujesz go, wprowadzasz nowe zmiany lub piszesz program od podstaw",
                            Level = 5
                        },
                        new
                        {
                            Id = 6,
                            ClosedQuestionId = 2,
                            Description = "You have no idea about this language",
                            DescriptionPl = "Nie znasz podstaw tego języka programowania",
                            Level = 1
                        },
                        new
                        {
                            Id = 7,
                            ClosedQuestionId = 2,
                            Description = "You know the basic concepts of C++ programming",
                            DescriptionPl = "Znasz podstawowe rzeczy związane z programowaniem w C++",
                            Level = 2
                        },
                        new
                        {
                            Id = 8,
                            ClosedQuestionId = 2,
                            Description = "You can write simple C++ codes",
                            DescriptionPl = "Potrafisz pisać proste kody w języku",
                            Level = 3
                        },
                        new
                        {
                            Id = 9,
                            ClosedQuestionId = 2,
                            Description = "You can write code that is more advanced (you know what are conditions, loops, objects, functions)",
                            DescriptionPl = "Potrafisz pisać kod, który jest bardziej zaawansowany (wiesz na czym polegają warunki, pętle, obiekty, funkcje)",
                            Level = 4
                        },
                        new
                        {
                            Id = 10,
                            ClosedQuestionId = 2,
                            Description = "You can easily analyze the code, edit it, introduce new changes or write the program from scratch",
                            DescriptionPl = "Bez problemu analizujesz kod, edytujesz go, wprowadzasz nowe zmiany lub piszesz program od podstaw",
                            Level = 5
                        },
                        new
                        {
                            Id = 11,
                            ClosedQuestionId = 3,
                            Description = "You have no idea about this language",
                            DescriptionPl = "Nie znasz podstaw tego języka programowania",
                            Level = 1
                        },
                        new
                        {
                            Id = 12,
                            ClosedQuestionId = 3,
                            Description = "You know the basic concepts of Python programming",
                            DescriptionPl = "Znasz podstawowe rzeczy związane z programowaniem w Pythonie",
                            Level = 2
                        },
                        new
                        {
                            Id = 13,
                            ClosedQuestionId = 3,
                            Description = "You can write simple Python codes",
                            DescriptionPl = "Potrafisz pisać proste kody w języku",
                            Level = 3
                        },
                        new
                        {
                            Id = 14,
                            ClosedQuestionId = 3,
                            Description = "You can write code that is more advanced (you know what are conditions, loops, objects, functions)",
                            DescriptionPl = "Potrafisz pisać kod, który jest bardziej zaawansowany (wiesz na czym polegają warunki, pętle, obiekty, funkcje)",
                            Level = 4
                        },
                        new
                        {
                            Id = 15,
                            ClosedQuestionId = 3,
                            Description = "You can easily analyze the code, edit it, introduce new changes or write the program from scratch",
                            DescriptionPl = "Bez problemu analizujesz kod, edytujesz go, wprowadzasz nowe zmiany lub piszesz program od podstaw",
                            Level = 5
                        },
                        new
                        {
                            Id = 16,
                            ClosedQuestionId = 4,
                            Description = "You know the basic information about the router",
                            DescriptionPl = "Znasz podstawowe informacje na temat routera",
                            Level = 1
                        },
                        new
                        {
                            Id = 17,
                            ClosedQuestionId = 4,
                            Description = "You can login to the router and you can freely navigate the interface",
                            DescriptionPl = "Potrafisz zalogować się do routera i swobodnie poruszasz się po interfejsie",
                            Level = 2
                        },
                        new
                        {
                            Id = 18,
                            ClosedQuestionId = 4,
                            Description = "You can configure the basic network settings of the router",
                            DescriptionPl = "Potrafisz skonfigurować podstawowe ustawienia sieciowe w routerze",
                            Level = 3
                        },
                        new
                        {
                            Id = 19,
                            ClosedQuestionId = 4,
                            Description = "You can configure the router for many devices and take care of security in the network",
                            DescriptionPl = "Potrafisz skonfigurować router dla wielu urządzeń oraz zadbać o bezpieczeństwo w sieci",
                            Level = 4
                        },
                        new
                        {
                            Id = 20,
                            ClosedQuestionId = 4,
                            Description = "Can you configure router in linux system in text mode",
                            DescriptionPl = "Potrafisz skonfigurować router w systemie linux w trybie tekstowym",
                            Level = 5
                        },
                        new
                        {
                            Id = 21,
                            ClosedQuestionId = 5,
                            Description = "You have not configured any Active Directory service",
                            DescriptionPl = "Nie konfigurowałeś żadnej usługi Active Directory",
                            Level = 1
                        },
                        new
                        {
                            Id = 22,
                            ClosedQuestionId = 5,
                            Description = "Youhave installed Active Directory but did not configure it",
                            DescriptionPl = "Instalowałeś usługę Active Directory, ale jej nie konfigurowałeś",
                            Level = 2
                        },
                        new
                        {
                            Id = 23,
                            ClosedQuestionId = 5,
                            Description = "You can add basic services to the domain and make simple configuration",
                            DescriptionPl = "Potrafisz dodawać podstawowe usługi do domeny i zrobić prostą konfigurację",
                            Level = 3
                        },
                        new
                        {
                            Id = 24,
                            ClosedQuestionId = 5,
                            Description = "It's easy for you to surf the domain network settings, you can easily deal with creating domains and adding user or group accounts",
                            DescriptionPl = "Łatwość sprawia ci surfowanie po ustawieniach sieciowych domeny, bez problemu radzisz sobie z tworzeniem domen i dodawaniem kont użytkowników lub grup",
                            Level = 4
                        },
                        new
                        {
                            Id = 25,
                            ClosedQuestionId = 5,
                            Description = "AD service is your bread and butter and it doesn't cause you any problems",
                            DescriptionPl = "Usługa AD jest dla ciebie chlebem powszednim i nie sprawia ci żadnych problemów",
                            Level = 5
                        },
                        new
                        {
                            Id = 26,
                            ClosedQuestionId = 6,
                            Description = "You have never disassembled your desktop or laptop computer",
                            DescriptionPl = "Nigdy nie rozmontowywałeś komputera stacjonarnego lub laptopa",
                            Level = 1
                        },
                        new
                        {
                            Id = 27,
                            ClosedQuestionId = 6,
                            Description = "You know the basic components of a computer",
                            DescriptionPl = "Znasz podstawowe elementy składowe komputera",
                            Level = 2
                        },
                        new
                        {
                            Id = 28,
                            ClosedQuestionId = 6,
                            Description = "You can locate and name a given computer component",
                            DescriptionPl = "Potrafisz zlokalizować i nazwać dany komponent komputera",
                            Level = 3
                        },
                        new
                        {
                            Id = 29,
                            ClosedQuestionId = 6,
                            Description = "You deal with the assembly of computer components",
                            DescriptionPl = "Radzisz sobie z montażem podzespołów komputerowych",
                            Level = 4
                        },
                        new
                        {
                            Id = 30,
                            ClosedQuestionId = 6,
                            Description = "You can easily assemble the computer from scratch and start it",
                            DescriptionPl = "Bez problemu składasz od podstaw komputer i go uruchamiasz",
                            Level = 5
                        });
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a96d7c75-47f4-409b-a4d1-03f93c105647",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8156e1c6-3002-49d5-8b77-e5fdee923f48",
                            DateOfBirth = new DateTime(2022, 1, 13, 17, 52, 42, 32, DateTimeKind.Local).AddTicks(9407),
                            DepartmentId = 1,
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Klark",
                            IsActive = false,
                            LastName = "Kent",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvPk4hQZ7YGf5NY/u6LR7FizNdGbLOAzMTo7ve/7Rp0RHHMWuItXcNAD0f0TdvW+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4939e33-7e35-497c-9f46-db843dc26b98",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionPl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Software development",
                            NamePl = "Programowanie"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Computer networks",
                            NamePl = "Sieci komputerowe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Computer skills",
                            NamePl = "Obsługa komputera"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sales",
                            NamePl = "Handel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Languages",
                            NamePl = "Lingwistyka"
                        });
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.ClosedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionPl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ClosedQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "How good are you in C# development?",
                            DescriptionPl = "Jaka jest Twoja znajomość programowania w C#?",
                            IsActive = true,
                            Name = "C#",
                            NamePl = "C#"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "How good are you in C++ development?",
                            DescriptionPl = "Jaka jest Twoja znajomość programowania w C++?",
                            IsActive = true,
                            Name = "C++",
                            NamePl = "C++"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "How good are you in Python development?",
                            DescriptionPl = "Jaka jest Twoja znajomość programowania w Pythonie?",
                            IsActive = true,
                            Name = "Python",
                            NamePl = "Python"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "How good are you in Computer Networks?",
                            DescriptionPl = "Jaka jest Twoja znajomość sieci komputerowych?",
                            IsActive = true,
                            Name = "Router configuration",
                            NamePl = "Konfiguracja routera"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "How good are you in Active Directory?",
                            DescriptionPl = "Jaka jest Twoja znajomość usługi Active Directory?",
                            IsActive = true,
                            Name = "Active Directory",
                            NamePl = "Usługa Active Directory"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "What is Your Computer Hardware Knowledge?",
                            DescriptionPl = "Jaka jest Twoja znajomość Hardware komputera?",
                            IsActive = true,
                            Name = "Hardware",
                            NamePl = "Sprzęt komputerowy"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "How well you know MS Windows installation?",
                            DescriptionPl = "Jaka jest Twoja znajomość na temat instalacji systemu Windows?",
                            IsActive = false,
                            Name = "Windows installation",
                            NamePl = "Instalacja systemu Windows"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Description = "How good you are in Warehouse Management Software?",
                            DescriptionPl = "Jaka jest Twoja znajomość obsługi programów magazynowych?",
                            IsActive = false,
                            Name = "Handling of the warehouse software",
                            NamePl = "Obsługa programu magazynowego"
                        });
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionPl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "unassigned",
                            NamePl = "nieprzypisany"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IT",
                            NamePl = "IT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HR",
                            NamePl = "HR"
                        });
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionPl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Initial Job Title",
                            DescriptionPl = "Wstępne stanowisko",
                            Name = "not assigned",
                            NamePl = "nie przypisano"
                        });
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.OpenQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionPl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpenQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "What is important to me at work?",
                            NamePl = "Co jest dla mnie ważne w pracy?"
                        },
                        new
                        {
                            Id = 2,
                            Name = "What is important to me personally?",
                            NamePl = "Co jest ważne dla mnie osobiście?"
                        },
                        new
                        {
                            Id = 3,
                            Name = "My hobby",
                            NamePl = "Moje hobby"
                        },
                        new
                        {
                            Id = 4,
                            Name = "My Skills",
                            NamePl = "Moje inne umiejętności"
                        },
                        new
                        {
                            Id = 5,
                            Name = "My Interests",
                            NamePl = "Moje zainteresowania"
                        },
                        new
                        {
                            Id = 6,
                            Name = "What are my goals?",
                            NamePl = "Jakie są moje cele?"
                        });
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.UserCategory", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationUserId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.UserClosedAnswer", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClosedQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("AnswerOptionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId", "ClosedQuestionId");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex("ClosedQuestionId");

                    b.ToTable("UserClosedAnswers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = "a96d7c75-47f4-409b-a4d1-03f93c105647",
                            ClosedQuestionId = 1,
                            AnswerOptionId = 2,
                            IsConfirmed = false
                        },
                        new
                        {
                            ApplicationUserId = "a96d7c75-47f4-409b-a4d1-03f93c105647",
                            ClosedQuestionId = 2,
                            AnswerOptionId = 4,
                            IsConfirmed = false
                        },
                        new
                        {
                            ApplicationUserId = "a96d7c75-47f4-409b-a4d1-03f93c105647",
                            ClosedQuestionId = 3,
                            AnswerOptionId = 3,
                            IsConfirmed = false
                        });
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.UserOpenAnswer", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OpenQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisplayed")
                        .HasColumnType("bit");

                    b.Property<string>("UserAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationUserId", "OpenQuestionId");

                    b.HasIndex("OpenQuestionId");

                    b.ToTable("UserOpenAnswers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProfileMatch.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProfileMatch.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfileMatch.Models.Models.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProfileMatch.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.AnswerOption", b =>
                {
                    b.HasOne("ProfileMatch.Models.Models.ClosedQuestion", "ClosedQuestion")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("ClosedQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClosedQuestion");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.ApplicationUser", b =>
                {
                    b.HasOne("ProfileMatch.Models.Models.Department", "Department")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfileMatch.Models.Models.JobTitle", "JobTitle")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Department");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.ClosedQuestion", b =>
                {
                    b.HasOne("ProfileMatch.Models.Models.Category", "Category")
                        .WithMany("ClosedQuestions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.UserCategory", b =>
                {
                    b.HasOne("ProfileMatch.Models.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserNeedCategories")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfileMatch.Models.Models.Category", "Category")
                        .WithMany("UserCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.UserClosedAnswer", b =>
                {
                    b.HasOne("ProfileMatch.Models.Models.AnswerOption", "AnswerOption")
                        .WithMany("UserClosedAnswers")
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("ProfileMatch.Models.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserClosedAnswers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfileMatch.Models.Models.ClosedQuestion", "ClosedQuestion")
                        .WithMany("UserClosedAnswers")
                        .HasForeignKey("ClosedQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("ApplicationUser");

                    b.Navigation("ClosedQuestion");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.UserOpenAnswer", b =>
                {
                    b.HasOne("ProfileMatch.Models.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfileMatch.Models.Models.OpenQuestion", "OpenQuestion")
                        .WithMany("UserOpenAnswers")
                        .HasForeignKey("OpenQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("OpenQuestion");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.AnswerOption", b =>
                {
                    b.Navigation("UserClosedAnswers");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserClosedAnswers");

                    b.Navigation("UserNeedCategories");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.Category", b =>
                {
                    b.Navigation("ClosedQuestions");

                    b.Navigation("UserCategories");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.ClosedQuestion", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("UserClosedAnswers");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.Department", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.JobTitle", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("ProfileMatch.Models.Models.OpenQuestion", b =>
                {
                    b.Navigation("UserOpenAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
