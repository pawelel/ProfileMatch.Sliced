@*
    @inject IUserRepository personRepository
    @inject ICategoryRepository categoryRepository
    @inject IUserCategoryRepository needRepository
        <MudButton Link="/admin/edituserneedcategories" Class="pa-2 mx-2" Variant="Variant.Filled" Color="Color.Primary">Add New</MudButton>

    @if (categories == null)
    {
        <p>loading</p>
    }
    else
    {
        <MudTable Items="@needs">
            <HeaderContent>
                <MudTh>Category Name</MudTh>
                <MudTh>Need</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Category Name">@context.Category.Name</MudTd>
                <MudTd DataLabel="Need">@context.Want</MudTd>
            </RowTemplate>
        </MudTable>
    }
    <MudTable Items=@categories>
        <HeaderContent>
                <MudTh>Category Name</MudTh>
                </HeaderContent>
                <RowTemplate>
                             <MudTd DataLabel="Category Name">@context.Name</MudTd>
                             <MudTd DataLabel="Category Name">@context.Name</MudTd>
                </RowTemplate>
    </MudTable>

@code {
    IEnumerable<Category> categories;
    [CascadingParameter] public ApplicationUser CurrentUser { get; set; }
    IEnumerable<UserCategory> needs;
        IEnumerable<ApplicationUser> people;

        public async Task<IEnumerable<Category>> GetCategories()
        {
            return await categoryRepository.GetCategories();

        }

        public async Task<IEnumerable<UserCategory>> GetNeeds()
        {
            return await needRepository.GetAll();
        }

        
        protected async Task<IEnumerable<ApplicationUser>> GetPeople()
        {
            return await personRepository.GetAll();
        }

        protected async override Task OnInitializedAsync()
        {
            categories = await GetCategories();
            needs = await GetNeeds();
            people = await GetPeople();
        }
    }*@