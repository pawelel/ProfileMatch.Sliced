@*@page "/needs"
@inject IUserRepository personRepository
@inject ICategoryRepository categoryRepository
@inject INeedRepository needRepository

@if (person == null || categories == null)
{
    <p>loading</p>
}
else
{
    <MudTable Items="@needs">
        <HeaderContent>
            <MudTh>Category Name</MudTh>
            <MudTh>Need</MudTh>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Category Name">@context.CategoryName</MudTd>
            <MudTd DataLabel="Need">@context.Want</MudTd>
            <MudTd DataLabel="First Name">@context.FirstName</MudTd>
            <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    IEnumerable<Category> categories;
    EditUserVM person;
    IEnumerable<UserNeedCategory> needs;
    IEnumerable<EditUserVM> people;

    public async Task<IEnumerable<Category>> GetCategories()
    {
        return await categoryRepository.GetCategories();

    }

    public async Task<IEnumerable<UserNeedCategory>> GetNeeds()
    {
        return await needRepository.GetNeeds();
    }

    public async Task<EditUserVM> GetPerson()
    {
        return await personRepository.GetPerson(1);

    }
    protected async Task<IEnumerable<EditUserVM>> GetPeople()
    {
        return await personRepository.GetPeople();
    }



    protected async override Task OnInitializedAsync()
    {
        person = await GetPerson();
        categories = await GetCategories();
        needs = await GetNeeds();
        people = await GetPeople();
    }
}*@
